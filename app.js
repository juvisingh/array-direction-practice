//sets a string variable 'directions' with the values given in the assignment
var directions = '()(((()())))()))()(())(()()()))))())(()((((()()()(()))())()((((((()))(()))())())())(()()))(((()())(())))))()))((()))()(())(()))())()(((())(()))()))(()(()())())()())))))()))(()()))(()()()()))(((()())(()()))))(()((())))((()((())()((())(()))(()))))()(((())))(((()))(()()())))))((()(()(()()(((()())))()(()))(()((()((())(())())(()))))()()(((()(()(()(())))))(()(((()(()))(()((()((())()))((((((()()))()(((()))()()(())()(((()())))()())())(()()(()(()((()()(((())))))(()((()())()))))(()((()((((())))))))(())((())))))))))))(())))())))((((()(()((())((()(()()(())))((()(()()(()))(())((((()()())()(((()))()(())))()))((((((((()(((())(())()((()()(()())(()()(())(())())()(()))())(()((()())))()))(()()((())()()))(()(()))(()))())(()((())))(()((()()((()))))()(((()(()()((()())())()()())))()((()()()))()((())()(()(()))((()))))(()())(())(()(()(())(((()())(((())))(()))))(((())))(()(())()()))(())()(()()(())))()())()(((()(()()())(((()()(()()()((((((())()))(()((()()(())))))))()(((()))(((()()()()((((()(())(()(()(()()))(())()()()((()))))()())(())))()()()(()(()((())((((())()((((()))((((()))((()(()))()))((())))((()(()(())())(())()))(()(()(()((()(())(()(((()())))((()()((())())()())()))))))()))(()((()(())())))))(()())(()((((())())))()()))()((((()()()))()((()((((()))((((()((((()()()()()))))())(())))()))())((()()))()())((()))))())((()))()()((((((((()(())())(()(()((()(()(())(()(()((((()))(()())())()((()())((()())(()((((())(()((()))(()((()(((()()()())(())(()((((()())()))()()()())))())()))))(()())(((()())()(()()))())((((())))))((()))((())())())))(()()())()()())())(())(()(())))()(()(())(()((((()))(((()(()()))()(())()(())))()((()(()(()()())(())()(()()))()))))((()(()()))(()())())((((((())()()))((()))))()((())((()())())(()()))()))((((()())(()()(((()(()))))(()()()()())((()(()))((()(()()))(())()((()())()()((())((()())))))((())())()()))()))(())((()))(())((((())))()()()())))())()(()))(()(())()())(((()))()))((()(())()())()(((())(()(()))))()(()((()())))))())))()(()()()()((()))(())(())))))((((()))(((()())(((()()())(()()()())((())()())()(((()))))))((()(((()(()(()))(())()()(())()()()(()()((((()(((((()((())))((()()((((()()))(()())(()))))))(())(()()))((((()))())(()((())))()))))(((()(())())()(()))))((())))))()()))((()())(()())))(())(((()))((())())(()(((())())(((())))()()))())(((()(())((()()(())))(()(()()(((((()()(()))((())((()((((()((((((((((((()()())))))((((())()(((())))))))))())(()(()(()(()((()(()(()(())((()))()()))()((((()))(((()(())((())(())()()((())()(()(((())(()(((()))(((((()))())()(())((()((((()())())(()))()()((((()(())()(()))(((((()()(()())))((())())(()))()(()()(()()())((()))()))())(())))(()())())))()()))())()()()(((((())))))()()())(()())))))(()))((()()(()((()(()())()((()())))))((()())()())))(()(()()())(()))))()(((((((()()()()()(())())()((((()(()))()()))(()))())(()))))))))))())()))(())(((())(((()))((((()()(()()))))))())())()(()))()()())))(((((()())())))(()()(()(((((()))((((()())((())((()((()))))()()(())(())()(()(((())()((()))))(())(((())())))(())(((((()()()))((()((())))())())((())())())))())(((()())())))(()()))((())))((()(()())((((())(()())(((())))))))((()(()(((()()()(((((())()))))()))()))((())))()()))(()())(())))))((((((())((())()(()))()(((())))()(()))()(()()((()(())())(())(())((((()())(())((()(()(((()())())())()))((()))))())(()))))((())()(()(())())()())()))))()()(()(()))(()()))))()())))))())(()())())(()))()((()(()(()))((()((()(())))()()((()()((((()()((()(()))())()(()))()()()(((()))((())))))((((((((((((())))())()))))((((()()((()((((())))())((())()()((()))()((()()())(()))(()((())()()())(()))(((()((())()((())(()()((()))(()())((()))())((())))))(()())()))(((((()((()((()(())()))(())())((())())(())))))))(()()()())(((())((((())))())(((()))()()))()))))))(()((()(()((((())(((())(())()))(())()))())))(())(((())(()(()()((()((()))))()()()(())((()(()())(()(()))())(())(((()(((()())((((()((())((((())(()()())())()(())))))())())))))()(()))))()()))((())()()(()()(()()))((()())(((()()()(((())()()))(()(())()()))))))()()))(((()((()((()(())(((()())))))(()())((((()())))(()())(())))())((())(()(())())()))()()(())(())())()())(())))))((())(())))(())(())))(()()()))(()((())((((())))))())()()((((()())()))))()()))(()))))(())((((()(()()()()))))()()(((()((())())((()())())(())((())))))(((((())))((((()()))(()))))()))))()())()))(())(())))((((()(()(()()()((((()((((())))(())))))()))))()()(())))))()((())))((()(())((((()(((()))(()(()()))((())((())())))((())))((((((((())))((((()())(((()))))()())))))(()())))()((()()()()(()()(((())(()((())()((()())(((()()(((()((()(((()(()((()))))()()((()(()()(())))()()()()()(()()((()))(()()))((((((()(()((()(((()(()()((()()()(())()()))(()(()(()))()())())())(())))))(()())()(())))))(()()())())((((())()(((((()((()((()(()()((())(((((())()(()(()))(()(((((((()())())(()()))()((()))())((((()((((())())()((((()()()()))()(()()(()(()())(()())))()(()()(()()()())((()()((((())()()((((((()(((()((()(()(()(()))(()(()((())()))()())((()((()))())((()()()))(())((()(()(())(((()(()((()))()()())())(()(()((()(())(()()()(()())))((()((())))()(()((((())(()((()()()(()))))())()()))()(()((()(()(())()(())(())))()((((()((((((((()))()()())))())()((()(((()))()))(()((((()())())((((())()()))(()))(((()))(()(()))()(()))()((((((()()(((((())()(()(()(((())))))))())))))((())(()())(()()())((())()()())))()()(((((())))()))))(())(())())((((()(()()(()))((()))((()(())()(())))(()))(()))(())))(()))())))()((((((((((())()()))((((((()()))))())))()(((((((()())))(((()()))))()()(())(()(())())(())()))))()()()))(()((((()((((())(())((())))())((()()))()(((())()((()())()(()()()((()(((((()(()()()((((()()))))(((()(()(())()))((()))((()()())))(()((()(()((()()()()()((())(((()())()()((())()(((()))(()(())))))()())(((()()))()))((())((()(()))()((((()))()(())()()))))())())(()((((((()))((()()(()())))(())())))())(()())()((((((()()((()()))())((((()()(())()))())()()(((())))))))((()(()()(((((((((()(())(())(((()()()((((()())(()(((()(())()()()))())()())))()())))(()))())()()))())()()))()((())()())))(((())()(((()()(())(((()(()()()())((()))((()()((()()))((())(())(()(()((())())())()(()))))()())(((((()()()(())))((((()()()(()((())(()))())))))))(((())())()()(()(()()()))))(()())((()()))()()(()))())))(())(((())()()))(()()())(((()()())))(((()())(()))()))))))()()))()))()()(()))(()(()(()()(())(()()()))())(()()(()((())))(()())())((()()))()(((())))()(()))((()()((((((()))))(())((())(((((()())(()))(()))((((()))))(())(((()()())(((()()()()()()))(()()())())))()(()))))()())((((()()())())))()()))()())))))()(((((()(((()((())()()()((())))()))())()(()()))(()(())))))(()()(()((()((()(())((()((()())))()())))()()())()(()()(()(((()()((((((()())((()())()(()(((()))))())()())()())()(()())()))))))))))((()))(()))))))(()((())((()((()(()(()(()))()(()))()())())()())()(()(()))))()))(()((((((((((())))()()()(())(())(())(((()())()()((()()()(())))((())())()((((())(()))())(((()(()(((()((())(())))))))))))()(((((((()))))()(()))()))))(())(((()((((())((()(())()()())(()))())((()()()))(()(())())))())((()))((((()()))((())(()()((()()))))((((())(()))((()()((()(())()()(()()(()((()())(())))(()((()())()()()((())((()())(()(()())()(()()))))(())))()))))())(((()()()()(()('
//takes each singular value of the string and puts it in an array called 'direcArray'. 
var direcArray = directions.split("")
//for loop to take the direcArray and changes it into values of east and west to make things easier. 
for (i = 0; i < direcArray.length; i ++) {
    //If the index value is '(', change it to west.
    if (direcArray[i] == '(') {
        direcArray[i] = 'w'
    }
    //If the index change is ')', change it to east.
    else if (direcArray[i] = ')'){
        direcArray[i] = 'e'
    }
}

//Scenario 1
//sets a new counter variable named 'count'
let count = 0;
//for loop to count what direction and how many stations away the train will end at.
for (i = 0; i <direcArray.length; i++) {
    //if the train moves west, subtract one to count (representing the move to the left direction)
    if (direcArray[i] == 'w') {
        count -= 1
    }
    //if the train moves east, add one to count (representing the move to the right direction)
    else if (direcArray[i] == 'e') {
        count += 1
    }
}
//checks if the value is positive; the train is in the east direction (aka the right direction meaning its positive)
if (count > 0) {
    console.log('Start moving in the east direction. The train is ' + count + ' stations east.')
}
//checks if the value is negative; the train is in the east direction (aka the left direction meaning its negative)
else if (count < 0) {
    console.log('Starting moving in the west direction. The train is ' + (count * -1) + ' stations west.')
}
//else it is at the origin because the value is neither positive or negative, its 0 (aka the origin)
else {
    console.log('The train is at the origin.')
}

//Scenario 2
//sets a new variable 'counteast' to represent how far east the train has went
let countEast = 0;
//for loop to track where the station is, in the case that the train can't go in the left direction past the orign
for (i = 0; i <direcArray.length; i++) {
    //if the train moves east, add one to count (representing the move to the right direction)
    if (direcArray[i] == 'e') {
        countEast += 1
    }
    //if the train moves west, subtract one to count (representing the move to the left direction)
    if (direcArray[i] =='w') {
        //if the train is at its origin, continue the code and don't change the value since the train can't go past the origin to the left.
        if (countEast == 0) {
            continue;
        }
        //else represent the variable moving back west if its past the origin
        else {
            countEast -= 1
        }
    }
}
//displays the answer
console.log('The train is ' + countEast + " stations east.")

//Scenario 3
//sets a new array with the values, just so that the other code works and there is no confusion.
let nonDupArray = direcArray
//empty array that will store the final array needed to calculate the answer.
let finalArray = []
//for loop to ignore consecutive duplicates
for (let i = 0; i < nonDupArray.length; i++) {
    //if there are consecutive duplicates, add only one value to the new finalArray and move on to the next pair (via i++ which moves to the next pair of values)
    if (nonDupArray[i] === nonDupArray[i + 1]) {
        finalArray.push(nonDupArray[i])
        i++
    } 
    //if there is not consecutive values, add the value to the new finalArray and run the code again. There is no need to move on to a new pair, because the program still needs to check if the [i + 1] value and the [i + 2] value are similar.
    else {
        finalArray.push(nonDupArray[i])
    }
}
//sets a new counter variable named 'count'
let count1 = 0;
//for loop to count what direction and how many stations away the train will end at.
for (i = 0; i <finalArray.length; i++) {
    //if the train moves west, subtract one to count (representing the move to the left direction)
    if (finalArray[i] == 'w') {
        count1 -= 1
    }
    //if the train moves east, add one to count (representing the move to the right direction)
    else if (finalArray[i] == 'e') {
        count1 += 1
    }
}
//checks if the value is positive; the train is in the east direction (aka the right direction meaning its positive)
if (count1 > 0) {
    console.log('The train is ' + count1 + ' stations east.')
}
//checks if the value is negative; the train is in the east direction (aka the left direction meaning its negative)
else if (count1 < 0) {
    console.log('The train is ' + (count1 * -1) + ' stations west.')
}
//else it is at the origin because the value is neither positive or negative, its 0 (aka the origin)
else {
    console.log('The train is at the origin.')
}